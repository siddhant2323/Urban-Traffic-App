# -*- coding: utf-8 -*-
"""streamlit_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N3OPBakAy4OZpRPEqbe9F4mCe1HlWiMz
"""

import streamlit as st
import joblib
import numpy as np
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import os

# ---- PAGE CONFIG ----
st.set_page_config(page_title="Urban Traffic Dashboard", layout="wide")

# ---- Custom CSS Styling ----
st.markdown(
    """
    <style>
    /* Hide default Streamlit elements */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}

    /* Main app and sidebar styling */
    .stApp {
        background-color: #0E1117;
        color: #FAFAFA;
    }
    section[data-testid="stSidebar"] {
        background-color: #1E1E1E;
    }

    /* Metric card styling */
    .stMetric {
        background-color: #262730;
        padding: 15px;
        border-radius: 10px;
        text-align: center;
        color: #FAFAFA;
    }

    /* Tab button styling */
    button[data-baseweb="tab"] {
        background-color: #262730;
        color: #FAFAFA;
        border-color: #262730;
    }

    /* Custom styling for Streamlit buttons */
    div.stButton button {
        background-color: #262730 !important;
        color: #FAFAFA !important;
        border: none !important;
    }
    div.stButton button:hover {
        background-color: #1E1E1E !important;
    }

    /* Text styling */
    h1, h2, h3, h4, h5, p, label {
        color: #FAFAFA;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# ---- Header ----
st.markdown(
    "<h1 style='text-align: center;'>üö¶ Urban Traffic Accident Severity Dashboard</h1>",
    unsafe_allow_html=True
)
st.markdown(
    "<h4 style='text-align: center; color: gray;'>Predict accident severity & explore accident trends</h4><br>",
    unsafe_allow_html=True
)

# ---- Sidebar Info ----
st.sidebar.markdown("### About")
st.sidebar.info(
    "üöó Predict accident severity based on traffic details and explore accident insights interactively!"
)
st.sidebar.markdown("---")

# ---- Load trained LightGBM model ----
model = joblib.load('final_lightgbm_model.pkl')

# ---- Mapping Dictionaries ----
road_type_dict = {'Motorway (Major Highway)': 0, 'A-Road (Primary Route)': 1, 'B-Road (Secondary Road)': 2, 'Residential Street': 3}
weather_dict = {'Fine/Clear': 0, 'Raining': 1, 'Snowing': 2, 'Foggy': 3}
light_dict = {'Daylight': 0, 'Dark (Lights Lit)': 1, 'Dark (Lights Unlit)': 2}
vehicle_type_dict = {'Car': 0, 'Motorcycle': 1, 'Bicycle': 2, 'Bus': 3, 'Van': 4, 'Truck': 5, 'Pedal Cycle': 6, 'Other': 7}
day_dict = {'Monday': 0, 'Tuesday': 1, 'Wednesday': 2, 'Thursday': 3, 'Friday': 4, 'Saturday': 5, 'Sunday': 6}
location_cluster_dict = {'Zone 1': 0, 'Zone 2': 1, 'Zone 3': 2, 'Zone 4': 3, 'Zone 5': 4, 'Zone 6': 5, 'Zone 7': 6, 'Zone 8': 7, 'Zone 9': 8, 'Zone 10': 9}

# ---- Load Accident Data ----
@st.cache_data
def load_data():
    df = pd.read_csv('merged_cleaned_decoded_2023.csv', low_memory=False)
    return df

df_geo = load_data()

# ---- Tabs Layout ----
tab1, tab2 = st.tabs(["üìä Prediction", "üìà Insights"])

# ======================= TAB 1: Prediction ==========================
with tab1:
    st.header("üìä Prediction")
    st.subheader("üìã Accident Severity Predictor")

    # ---- Sidebar Inputs ----
    st.sidebar.header("Enter Accident Details:")

    road_type = st.sidebar.selectbox(
        "Road Type:",
        options=[None] + list(road_type_dict.keys()),
        format_func=lambda x: 'Select Road Type' if x is None else x
    )

    weather = st.sidebar.selectbox(
        "Weather Condition:",
        options=[None] + list(weather_dict.keys()),
        format_func=lambda x: 'Select Weather' if x is None else x
    )

    light = st.sidebar.selectbox(
        "Light Condition:",
        options=[None] + list(light_dict.keys()),
        format_func=lambda x: 'Select Light Condition' if x is None else x
    )

    vehicle_type = st.sidebar.selectbox(
        "Vehicle Type:",
        options=[None] + list(vehicle_type_dict.keys()),
        format_func=lambda x: 'Select Vehicle Type' if x is None else x
    )

    day_of_week = st.sidebar.selectbox(
        "Day of Week:",
        options=[None] + list(day_dict.keys()),
        format_func=lambda x: 'Select Day' if x is None else x
    )

    time_cleaned = st.sidebar.slider("Hour of Day (0 = Midnight, 23 = 11 PM):", 0, 23, 12)

    location_cluster = st.sidebar.selectbox(
        "Zone of Accident:",
        options=[None] + list(location_cluster_dict.keys()),
        format_func=lambda x: 'Select Zone' if x is None else x
    )

    # ---- Zone Explanation ----
    st.sidebar.markdown(
        """
        ‚ÑπÔ∏è **Zone Explanation:**
        - **Zone 1-10 represent different accident-prone location clusters.**
        - Based on accident density & clustering analysis.
        - **Zone 1:** Central high-density areas.
        - **Zone 10:** Outskirts or lower-density areas.
        """
    )

    st.sidebar.markdown("---")
    predict_button = st.sidebar.button("üîÆ Predict Severity")

    # ---- Prediction Check ----
    if predict_button:
        if None in [road_type, weather, light, vehicle_type, day_of_week, location_cluster]:
            st.sidebar.warning("‚ö†Ô∏è Please select all accident details before predicting!")
        else:
            features = np.array([[road_type_dict[road_type],
                                  weather_dict[weather],
                                  light_dict[light],
                                  vehicle_type_dict[vehicle_type],
                                  day_dict[day_of_week],
                                  time_cleaned,
                                  location_cluster_dict[location_cluster]]])

            prediction = model.predict(features)
            severity_map = {0: 'Fatal', 1: 'Serious', 2: 'Slight'}
            result = severity_map[prediction[0]]

            color_code = {'Fatal': 'üî¥ **FATAL ACCIDENT!**', 'Serious': 'üü† Serious', 'Slight': 'üü¢ Slight'}
            st.markdown(f"### üö® Predicted Accident Severity: {color_code[result]}", unsafe_allow_html=True)

    # ---- Quick Stats ----
    st.markdown("### üìä Quick Stats")
    col1, col2 = st.columns(2)
    with col1:
        st.metric(label="üìç Total Accidents", value=f"{len(df_geo)}")
    with col2:
        common_vehicle = df_geo['vehicle_type_label'].value_counts().idxmax() if 'vehicle_type_label' in df_geo.columns else "Car"
        st.metric(label="üöó Common Vehicle", value=common_vehicle)

# ======================= TAB 2: Insights ==========================
with tab2:
    st.header("üìà Insights")
    st.subheader("Accident Data Visualizations")

    # Severity Pie Chart
    if 'accident_severity_label' in df_geo.columns:
        fig = px.pie(df_geo, names='accident_severity_label', title='Accident Severity Distribution')
        st.plotly_chart(fig)

    # Accidents by Day Line Chart
    if 'day_of_week' in df_geo.columns:
        day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        df_geo['day_of_week'] = pd.Categorical(df_geo['day_of_week'], categories=day_order, ordered=True)
        fig2 = px.line(df_geo['day_of_week'].value_counts().sort_index(),
                       title='Accidents by Day of Week Trend',
                       labels={'index': 'Day', 'value': 'Number of Accidents'})
        st.plotly_chart(fig2)

    # Road Type vs Weather Grouped Bar
    if 'road_type_label' in df_geo.columns and 'weather_label' in df_geo.columns:
        fig3 = px.histogram(df_geo, x='road_type_label', color='weather_label',
                            barmode='group', title='Accidents by Road Type & Weather',
                            labels={'count': 'Number of Accidents'})
        st.plotly_chart(fig3)

    # Feature Importance
    st.subheader("üìä Model Feature Importance")
    importance = model.feature_importances_
    feature_names = ['Road Type', 'Weather', 'Light', 'Vehicle Type', 'Day of Week', 'Time', 'Location Cluster']
    fig4, ax = plt.subplots(figsize=(10, 5))
    ax.barh(feature_names, importance)
    ax.set_xlabel("Importance Score")
    st.pyplot(fig4)